export const traitKeyRegulators = `Trait Key Regulators\n\nThese are formatted on the structure chunk as arrays, eg \n{chunkId: "xxx", number: ["singular"], formulaImportantTraitKeys: ["number"]}\n\n\nF: formulaImportantTraitKeys\n\nThis upgrade the importance of the trait value you set (eg "f" for "gender"). It will be more resistant to change by the sentence creation/translation process.\n\n\nB: educatorBlocksAnnotationsForTheseTraitKeys\n\nNormally, in English Q sentence "The doctor is here." an annotation "male" or "female" would be added to "doctor", because Backend made a decision for one or the other, but that's opaque to the player because female or male it's still "doctor". And so with the annotation the player knows whether Polish A sentence should use "lekarz" or "lekarka". But some formulas the educator knows it's unambiguous - English Q sentence "The doctor and her dog." - educator has specified "f" for "gender" of "doctor" chunk, so they know there's no need for "female" annotation.\n\n\nP: merelyPreferredChoicesForQuestionSentence\n\nThis downgrades the importance of the traitValue you've set (eg "f" for "gender"). Think how in Polish there's no article but in English two. So Q: "Z kobietÄ…." should be A: ["With the woman.", "With a woman."] translating to both English forms, "definite" and "indefinite". This means we don't want to set a "form" trait value in the English formula. But English to Polish I only want Q sentences only with indefinite "With a woman." so I do set "form" to "indefinite" but downgrade its importance.`;
